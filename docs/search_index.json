[
["index.html", "Preface What is this Git/GitHub Tutorial about? Why is git important for scientists? Acknowledgment Other helpful links", " Git/GitHub Tutorial for Scientists: its not only for programmers Micaela Chan &amp; Ekarin Pongpipat Preface What is this Git/GitHub Tutorial about? The goal of this tutorial is to help scientists with no formal programming background to (1) start using git locally for version-control of your code, and (2) begin using GitHub to share your code and collaborate with others. Note: If we try to wait until we have perfect codes to share, more likely than not, we will end up never sharing them. Why is git important for scientists? Git facilitates (1) documentation, and (2) sharing/collaborating. Both of these are important in science. I. Version-control for code = the lab notebook of experiments In scientific experiments, we are trained to record every parameter that we modified and tested, as it ensures consistency within an experiment and facilitates reproducible results. While we often record the experimental part of our experiments meticulously, the preprocessing and analyzing of data are often ‘assumed’ to be recorded in our scripts. Here are a few scenarios where we wish a detailed history of how codes were developed is available: Scenario A: Things were working, now they are not! You have 5 people collaborating on a single script. That script now results in an error after someone changed a few lines over the weekend. They have no recollection what was changed. ¯\\_(._.)_/¯ Scenario B: Why were changes made? You joined a new lab, and were given a pipeline/script to modify that dated years back. The script is named cool_script_version25000.sh, with few comments. Whoever made it has quit academia and is traveling the world, soul searching, and won’t answer emails. ¯\\_(._.)_/¯ Scenario C: We made changes a long time ago… Collaborator BigName wants to know what preprocessing parameters were used in your manuscript from 5 years ago. You have since changed multiple parameters in your default processing pipeline. ¯\\_(._.)_/¯ Saving something as Final.doc is bad…but Final_script.R is just as bad II. Git and Remote Hosts (e.g., GitHub) makes sharing/collaborating easier Share codes The traditional method of sharing scientific results, manuscripts, is a difficult form to share scripts. For example, while you can share the general processes of how things are done, but the actual 1000+ lines scripts are usually not printed. Remote Hosts such as GitHub (or other alternatives) makes sharing your codes very easy. It’s a link. People can choose to follow your code, and if you update it, they get a notification. Facilitates new collaboration If you found a way to speed up some toolbox, Git/GitHub helps you to suggest this change to the author of the toolbox, even if you don’t know each other. Encourages open source and open science Open source is typically a term used in software development, where it means the source code are open to the public. People can freely look at how a program was written, make improvements with them, etc. In science, the idea of open source is closely linked with open science, a movement to make data, samples, software and all things related to a scientific finding as transparent and easy to access as possible. There are pros and cons to an open and closed system, and the balance between convenience, security, quality control is not a topic that can be adequately covered here. However, given a common goal of of wanting more people to understand, reproduce, and build on top of previous work, an ‘open’ approach to your code is certainly a good place to start. Git/Github will help facilitate your code being shared publicly. It also enables you to easily contribute to other projects, and let others contribute to yours. Acknowledgment The content in this workshop is heavily borrowed from Software Carpentry’s git novice course. Check them out! Other helpful links Git the Simple Guide All the necessary commands to use git is in here. "],
["setting-up-git.html", "1 Setting up git 1.1 Download git 1.2 Configuring git", " 1 Setting up git 1.1 Download git Mac Users: https://git-scm.com/downloads Windows User: https://github.com/git-for-windows/git/releases/tag/v2.23.0.windows.1 Linux User: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git Notes for Windows users. The above download will install Git and Git Bash. Git Bash gives you a linux-like terminal that runs Bash. Git can also be run from Power Shell, but Git Bash would allow you to run every command in this tutorial (e.g., functions such as touch or echo for making file and printing lines in a terminal). 1.2 Configuring git This user name and email is your identity when using git. Sometimes you don’t want to use a personal email, a no-reply email associated with Github is available for that. For now, just use your personal email. 1.2.1 Setup username and email git config –global user.name “Your Name” git config –global user.email “Your Email” 1.2.2 Setup the correct linebreaks encoding Differnt operating systems (OS) uses different characters to encode new lines (linebreaks). Setting git to make sure it reads the correct type of characters as linebreaks. Mac/Linux git config –global core.autocrlf input Windows git config –global core.autocrlf true 1.2.3 Setup “nano” as the text editor to interface with git The default text editor for git is Vim, which is difficult to use. nano is a good alternative that can still handle text editing within the terminal. (You could setup other text editors as your default). git config –global core.editor “nano -w” 1.2.4 Check to ensure settings are correct git config –list 1.2.4.1 Helpful links to setting up git https://help.github.com/en/articles/configuring-git-to-handle-line-endings#platform-all Now you should have Git installed on your personal computer (or server), with basic configurations all set and ready to go! "],
["creating-a-repository-git-init.html", "2 Creating a Repository (git init) 2.1 Create a directory call workdir in your Desktop for this tutorial 2.2 Create a repository, where git store versions of your file", " 2 Creating a Repository (git init) Key tersm/command Repository (repo): A repo is a .git/ folder that lives inside the directory that you want to track all the changes you made to it. git init: A git command that creates a repository (the .git/ folder). 2.1 Create a directory call workdir in your Desktop for this tutorial mkdir ~/Desktop/workdir cd ~/Desktop/workdir 2.2 Create a repository, where git store versions of your file Create a repository within a folder git init This is what you will see: Initialized empty Git repository in ~Desktop/workdir/.git/ Check that a hidden folder .git has been created ls -a Check the status of git git status On branch master No commits yet nothing to commit (create/copy files and use &quot;git add&quot; to track) You now have a repository (i.e., a .git/ folder) within a directory that you want to track! "],
["tracking-changes-git-add-commit.html", "3 Tracking Changes (git add &amp; commit) 3.1 Adding new files/modification (git add) 3.2 Saving these changes to the repository (git commit) BONUS - Checking what has changed before add/commit (git diff) Notes", " 3 Tracking Changes (git add &amp; commit) The key commands for documenting changes are git add and git commit. Key terms/commands: git add: Tells git which files’ changes you want to document. Formally, this is call adding a file to the “index/staging area”. git commit: Tell git to document the changes you specified using git add (i.e., the files in the staging area), with an accompanying commit message that you have to provide to explain what changes were made. While the process of adding and then committing seems redundant, overtime it will be apparent why we don’t always just commit ALL changes that have been made to your files, and how the ‘mandatory’ commit message creates a good documentation for your project. 3.1 Adding new files/modification (git add) Make sure you are in the correct directory cd ~/Desktop/workdir Make a new file foo.txt touch foo.txt Check the status git status On branch master No commits yet Untracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) foo.txt nothing added to commit but untracked files present (use &quot;git add&quot; to track) If there are untracked files, we would like to add those files so git will track their changes: git add foo.txt Check the status again, foo.txt should now be ready to get committed (a commit is a revision to your files). git status On branch master No commits yet Changes to be committed: (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage) new file: foo.txt 3.2 Saving these changes to the repository (git commit) Commit the file and note the identifier for this commit (e.g., f22b25e): git commit -m “Add foo.txt to repo” [master (root-commit) 4fb0bed] Add foo.txt to repo 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 foo.txt What have we done so far? Lets check the log, which list all the commits made so far. git log commit 4fb0bed52e6ab134d72715159857f36ec799863d (HEAD -&gt; master) Author: Your Name &lt;something@email.com&gt; Date: Tue Sep 10 19:19:00 2019 -0500 Add foo.txt to repo BONUS - Checking what has changed before add/commit (git diff) Add some text to the file foo.txt echo hello &gt;&gt; foo.txt Check what has changed between your last commit and now: git diff diff --git a/foo.txt b/foo.txt index e69de29..ce01362 100644 --- a/foo.txt +++ b/foo.txt @@ -0,0 +1 @@ +hello Add &amp; commit your changes to foo.txt git add foo.txt git commit -m “Add hello in foo.txt” Check the status and log again using git status and git log Notes Git does not track an empty directory, so until a directory has a file in it, git would not track it. You have now used Git to track the file foo.txt. You can use git log to read what you have done so far in this repository! "],
["exploring-history-git-diff-show.html", "4 Exploring History (git diff &amp; show) 4.1 Difference between current file and N commit ago (git diff HEAD) 4.2 What was done in ____ commit? (git show)", " 4 Exploring History (git diff &amp; show) 4.1 Difference between current file and N commit ago (git diff HEAD) Lets add another line to foo.txt echo world &gt;&gt; foo.txt Check what is different from your current version of foo.txt compare to the last commit git diff HEAD foo.txt diff --git a/foo.txt b/foo.txt index ce01362..94954ab 100644 --- a/foo.txt +++ b/foo.txt @@ -1 +1,2 @@ hello +world Check difference compare to two commits ago git diff HEAD~1 foo.txt diff --git a/foo.txt b/foo.txt index e69de29..94954ab 100644 --- a/foo.txt +++ b/foo.txt @@ -0,0 +1,2 @@ +hello +world Check difference against a specific commit based on identifer (the unique identifier is different for you, use git log to check!) git diff 7be71q foo.txt 4.2 What was done in ____ commit? (git show) Sometimes we want to check what was done during a certain commit (instead of comparing differences) git show HEAD~1 foo.txt commit d5cfbb80dd0d48a2fdcbfda8e8196d0a4d1193da Author: Your Name &lt;yourname@email.com&gt; Date: Tue Sep 10 19:36:24 2019 -0500 Add foo.txt to repo diff --git a/foo.txt b/foo.txt new file mode 100644 index 0000000..e69de29 You have now compared different versions of a file using git diff and check its changes during a specific commit using git show. "],
["tell-git-to-ignore-files.html", "5 Tell git to ignore files 5.1 BONUS - Use wildcard", " 5 Tell git to ignore files Make a file named .gitignore (you can also use nano/any-text-editor to do it) touch ignore_this.txt echo ignore_this.txt &gt;&gt; .gitignore Try git add ignore_this.txt, and you will see git will not add it. The following paths are ignored by one of your .gitignore files: ignore_this.txt Use -f if you really want to add them. If you want to add a suppsoedly ignored file, use -f git add -f ignore_this.txt 5.1 BONUS - Use wildcard You can use wildcard expressions in this file as well. Some common things in a .gitignore file are .*, *~, ~*, which are often temporary or backup files. There should now be a .gitignore file in your directory. "],
["git-ne-github.html", "6 Git \\(\\ne\\) GitHub 6.1 Git is a remote server that hosts a repository (remote host) 6.2 Create aa repository in on github (a remote repo)", " 6 Git \\(\\ne\\) GitHub Thus far, everything is within your local computer and done using git. That is the version control portion of git, which is important and powerful. However, what makes git a efficient tool for collaboration is its power to share through remote hosts like GitHub. GitHub is not the only option, there are other companies that offer free remote hosting, here are a few alterantives Bitbucket, Gitlab 6.1 Git is a remote server that hosts a repository (remote host) Remember git init makes a .git/ folder in your project. That is a local repository (local=lives on your computer). GitHub is essentially a remote server that hosts a .git/ folder. GitHub also comes with tons of tools to help you visualize and manage your repository. 6.2 Create aa repository in on github (a remote repo) Navigate to https://github.com/your_username Click Repositories tab Click New Enter workdir as the Repository name, click Create repository You now have an empty remote repository and some instructions to populate it! "],
["putting-codes-on-github.html", "7 Putting codes on Github 7.1 Push an existing repository from your local computer BONUS - SSH keys", " 7 Putting codes on Github Key terms/commands: git push: a commmand to upload your code to a remote repository (like Github!) 7.1 Push an existing repository from your local computer Go back to the loacl directory, workdir that we made in previous sections. cd ~/Desktop/workdir Add the github repo you just made as a remote repository that you want to push your data to git remote add origin https://github.com/your_username/workdir.git Push your local repository to your Github git push –u origin master BONUS - SSH keys Here is a link to help you setup using SSH keys for authentication with Github https://help.github.com/en/enterprise/2.15/user/articles/adding-a-new-ssh-key-to-your-github-account Your code is now available on Github! "],
["getting-a-repository-from-github-fork-git-clone.html", "8 Getting a repository from Github (fork &amp; git clone) 8.1 Fork a repository (remote -&gt; remote) 8.2 Cloning a repository (remote -&gt; local)", " 8 Getting a repository from Github (fork &amp; git clone) Key terms/commands: fork: copy someone’s Github repository and putting it in your Github clone: copy (download) a remote repo onto your local computer 8.1 Fork a repository (remote -&gt; remote) Fork this repository that you are reading this README file into your github. Click the Fork icon near the top right corner …It will take a little while to load… You should be redirected to a copy of the same repository in YOUR Github account 8.2 Cloning a repository (remote -&gt; local) Clone YOUR git_github_workshop repository onto your local computer: git clone https://github.com/your_username/git_github_workshop.git ~/Desktop/git_github_workshop You have cloned someone else’s repository! This is often how collaboration starts through Github. "],
["collaborating-git-fetch-pull.html", "9 Collaborating (git fetch &amp; pull) 9.1 Setup a fake collaborator, yourself in another directory :) 9.2 Implement the changes your fake collaborator made Notes BONUS - What is my remote? 9.3 Really collaborating on Github", " 9 Collaborating (git fetch &amp; pull) Key terms/commands: git fetch: look at the changes that is in your remote repository Github. This commands download the changes into the .git/ folder so you can compare changes to your local files, but it does not actually modify your files (i.e., files outside of the .git/ folder). git pull: implement the changes you have fetched into your local files. 9.1 Setup a fake collaborator, yourself in another directory :) Clone the workdir repo into your local computer but a different folder as if you have a collaborator git clone https://github.com/your_username/workdir.git ~/Desktop/workdir_fake_collab Lets pretend you are the collaborator, and you will make some changes and push it to Github cd ~/Desktop/workdir_fake_collab touch foofoo.txt git add foofoo.txt git commit -m “Add foofoo.txt” git push origin master Lets check what is in the current folder ls Check what is on the workdir repository on Github. It should contain foofoo.txt But what about the original workdir folder? ls ~/Desktop/workdir foofoo.txt should be missing. Now lets say you want to check what changes your collaborator made. 9.2 Implement the changes your fake collaborator made fetch the changes your fake collaborator pushed to Github onto your local computer. git fetch NOTE that this does not change the files in your directory. But now you can use git diff to see what your collaborator has changed git diff master origin/master If you decided these are changes you want in your local directory (the origainl workdir) git pull Notes git pull returns message “Already up to date.” git pull impelment the changes that were fetched by git fetch, so fetch first. Will git fetch change my stuff? Fetching does not change your local file until your pull. BONUS - What is my remote? What is your remote? git remote -v Adding a different remote git add remote [name] [url] Changing the URL of the remote (e.g., you change the remote repository) git remote set-url [name] [newurl] 9.3 Really collaborating on Github Adding collaborators in your Github repository Click Settings Click Collaborators and add them (they need to be on Github) More Advance way to collaborate (won’t cover in detail) fork a repository you want to make changes git clone it to your local computer Make changes, git add, git commit and git push it to your forked remote repo Make a Pull Request in the original repository "],
["conflicts.html", "10 Conflicts 10.1 Create a conflict 10.2 Resolving a conflict 10.3 Tips to prevent conflicts", " 10 Conflicts Key terms/commands: Conflict: when the same portion of a file is edited, it will have to be manually resolved before it can be pulled/pushed. 10.1 Create a conflict Go into your fake collaborator’s folder and add a line to foo.txt cd ~/Desktop/workdir_fake_collab echo fake_colab &gt;&gt; foo.txt Add, commit and push the changes to the remote repository git add foo.txt git commit -m “Add fake collab line to foo.txt” git push Now go into the original workdir and add a different line to foo.txt cd ~/Desktop/workdir echo real_me &gt;&gt; foo.txt Add and commit the change git add foo.txt git commit -m “Add real me line to foo.txt” Try to push it, and you should get an error git push 10.2 Resolving a conflict Pull the changes from the remote server, which your fake collab has made a change git pull This should result in a conflict message. Two versions of the conflicting line is shown: Your local version is between &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADand=======` The remote version is between ======= and &gt;&gt;&gt;&gt;&gt;&gt;&gt; (unique identifier of the commit) Edit the file with conflicting lines nano foo.txt Then add and commit the edited file git add foo.txt git commit -m “Merge changes from Github” Push your changes to the remote repo git push Now we pull from the remote repo again 10.3 Tips to prevent conflicts Always fetch/merge (or pull) before making changes locally Use branches Commit often (so people can pull your changes frequently as well) Have smaller files, so it is less likely for multiple people to edit the same file. Communicate often with your collaborators :) "],
["revert-to-a-previous-commit-git-checkout.html", "11 Revert to a previous commit (git checkout) 11.1 Going back to a specific version of a file (git checkout) 11.2 Going back to an entire commit - Detached HEAD (CAUTION)", " 11 Revert to a previous commit (git checkout) Key terms/commands: git checkout: A git command to revert a file to a previous state. You can also checkout your entire folder, but that is potentially a dangerous move (read the end of this chapter). 11.1 Going back to a specific version of a file (git checkout) Before going back to a previous state of a file, COMMIT what you have now git add foo.txt git commit -m “Add world” Recover the foo.txt that doesn’t have “world” in it (use HEAD~1 or unique identifier) git checkout HEAD~1 foo.txt Check what is in foo.txt cat foo.txt hello Go back to the state where “world” was in the file git checkout HEAD foo.txt cat foo.txt hello world 11.2 Going back to an entire commit - Detached HEAD (CAUTION) If you git checkout a previous commit without also specifying a file, you will revert the entire directory to a previous condition git checkout HEAD~1 You should get a message like this You are in &#39;detached HEAD&#39; state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may do so (now or later) by using -b with the checkout command again. Example: git checkout -b &lt;new-branch-name&gt; Use git checkout HEAD to return to most recent state. IF you checkout a previous commit without first committing your current state, then anything not committed would be lost!!! "],
["branching-git-branch.html", "12 Branching (git branch) 12.1 Check what branch you’re on 12.2 Create new branch 12.3 Switch between branches (git commit) 12.4 Merge branch 12.5 Delete a branch", " 12 Branching (git branch) Want to create or edit a new script or function but not ready to make it live (available to everyone) just yet? Create a new branch! 12.1 Check what branch you’re on If you’ve never changed a branch. You’re likely using the master or main branch. It’s always a good idea to check what branch you’re using: git branch ## * master The one marked with the * is the name of branch that you’re currently on, also known as the active branch. 12.2 Create new branch To create a new branch, we can enter: git branch &lt;branch_name&gt; For example, if we want to make a test a new function on a new branch, we can create the new branch by entering: git branch cool_new_function To make sure the branch exists, we can enter: git branch ## cool_new_function ## * master 12.3 Switch between branches (git commit) To switch to the new branch, git checkout &lt;branch_name&gt; Example: git checkout cool_new_function ## Switched to branch &#39;cool_new_function&#39; ## D .DS_Store ## M Rmd/01-setting_up_git.Rmd ## M Rmd/02-create_repo.Rmd ## M Rmd/03-track-changes.Rmd ## M Rmd/04-exploring-history.Rmd ## M Rmd/05-git-ignore.Rmd ## M Rmd/06-setup-github.Rmd ## M Rmd/07-put-codes-on-github.Rmd ## M Rmd/08-get-a-repo.Rmd ## D Rmd/cool_new_function.sh ## D cool_new_function.sh ## M docs/collaborating-git-fetch-pull.html ## M docs/conflicts.html ## M docs/index.html ## M docs/putting-codes-on-github.html ## M docs/revert-to-a-previous-commit-git-checkout.html ## M docs/search_index.json ## M docs/setting-up-git.html ## M docs/tell-git-to-ignore-files.html ## M docs/tracking-changes-git-add-commit.html Let’s check that we actually switched. git branch ## * cool_new_function ## master Notice that the * is now on cool_new_function. Note: You can also create and switch to a branch in one command using: git checkout -b &lt;branch_name&gt; Now that you’re in your new branch, you can make, edit, and commit script(s) as you want without affecting anything on the master branch. touch cool_new_function.sh git add cool_new_function.sh git commit -m &quot;added cool new function&quot; ls ## On branch cool_new_function ## Changes not staged for commit: ## deleted: .DS_Store ## modified: Rmd/01-setting_up_git.Rmd ## modified: Rmd/02-create_repo.Rmd ## modified: Rmd/03-track-changes.Rmd ## modified: Rmd/04-exploring-history.Rmd ## modified: Rmd/05-git-ignore.Rmd ## modified: Rmd/06-setup-github.Rmd ## modified: Rmd/07-put-codes-on-github.Rmd ## modified: Rmd/08-get-a-repo.Rmd ## deleted: Rmd/cool_new_function.sh ## modified: docs/collaborating-git-fetch-pull.html ## modified: docs/conflicts.html ## modified: docs/index.html ## modified: docs/putting-codes-on-github.html ## modified: docs/revert-to-a-previous-commit-git-checkout.html ## modified: docs/search_index.json ## modified: docs/setting-up-git.html ## modified: docs/tell-git-to-ignore-files.html ## modified: docs/tracking-changes-git-add-commit.html ## ## Untracked files: ## Rmd/01-setting_up_git.html ## Rmd/12-branching.html ## docs/branching-git-branch.html ## git_github_workshop.Rmd ## ## no changes added to commit ## DESCRIPTION ## README.md ## Rmd ## _bookdown.yml ## cool_new_function.sh ## docs ## git_github_bookdown.Rproj ## git_github_workshop.Rmd ## index.Rmd 12.4 Merge branch Ready to make the modification available to everyone? Let’s merge the change back to the master branch. First, we have to switch back to the master branch git checkout master and then merge the commit git merge &lt;branch_name&gt; git checkout master ls ## Switched to branch &#39;master&#39; ## D .DS_Store ## M Rmd/01-setting_up_git.Rmd ## M Rmd/02-create_repo.Rmd ## M Rmd/03-track-changes.Rmd ## M Rmd/04-exploring-history.Rmd ## M Rmd/05-git-ignore.Rmd ## M Rmd/06-setup-github.Rmd ## M Rmd/07-put-codes-on-github.Rmd ## M Rmd/08-get-a-repo.Rmd ## D Rmd/cool_new_function.sh ## M docs/collaborating-git-fetch-pull.html ## M docs/conflicts.html ## M docs/index.html ## M docs/putting-codes-on-github.html ## M docs/revert-to-a-previous-commit-git-checkout.html ## M docs/search_index.json ## M docs/setting-up-git.html ## M docs/tell-git-to-ignore-files.html ## M docs/tracking-changes-git-add-commit.html ## Your branch is ahead of &#39;origin/master&#39; by 1 commit. ## (use &quot;git push&quot; to publish your local commits) ## DESCRIPTION ## README.md ## Rmd ## _bookdown.yml ## cool_new_function.sh ## docs ## git_github_bookdown.Rproj ## git_github_workshop.Rmd ## index.Rmd git merge cool_new_function ls ## Already up to date. ## DESCRIPTION ## README.md ## Rmd ## _bookdown.yml ## cool_new_function.sh ## docs ## git_github_bookdown.Rproj ## git_github_workshop.Rmd ## index.Rmd 12.5 Delete a branch Done using a branch or created one by accident? Delete the branch by entering: git branch -d &lt;branch_name&gt; git branch -d cool_new_function ## Deleted branch cool_new_function (was 5e13b4f). git branch ## * master "]
]
